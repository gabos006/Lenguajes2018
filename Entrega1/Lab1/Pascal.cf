-- 224435 - Gabriel Pereyra
-- 168772 - Mario Souto

comment "(*" "*)" ;

token Id (letter (letter | digit)*) ;

--Programa--
PProgram . Program ::= "program" Id ";" Block ;


--Bloque--
PBlock . Block ::= Parts Body "." ;


--Partes--
PPart . Parts ::=  Consts Types Vars [ProcsYFuncs] ;


--Constantes--
PPartConstsEmpty . Consts ::= ;
PPartConst . Consts ::= "const" [Const] ;
PConst . Const ::= Id "=" Literal ;


--Literales--
PValInteger . Literal ::= Integer ;
PValDouble . Literal ::= Double ;
PValString . Literal ::= String ;
PValChar . Literal ::= Char ;


--Variables--
PPartVarsEmpty . Vars ::= ;
PPartVars . Vars ::= "var" [Var] ;
PVar . Var ::= [Id] ":" CustomType ;


--Tipos--
PPartTypesEmpty . Types ::= ;
PPartTypes . Types ::= "type" [Type] ;
PType . Type ::= Id "=" CustomType ;


--Tipo Enumerado--
PCustomTypeEnum . CustomType ::= "(" [Id] ")" ;


--Tipo SubRango--
PCustomTypeSubRange . CustomType ::= RangeType ".." RangeType ;
PRangeTypeId . RangeType ::= Id ;
PRangeTypeLiteral . RangeType ::= Literal ;


--Tipo Puntero--
PCustomTypePointer . CustomType ::= "^" Id ;


--Tipo Array--
PTypeArray . CustomType ::= "array" "[" [ArrType] "]" "of" CustomType ;
separator ArrType "," ;
PTypeArrayId . ArrType ::= Id ;
PTypeArrayLiteral . ArrType ::= Literal ;
PTypeArrayRange . ArrType ::= RangeType ".." RangeType ;


--Tipo Record--
PTypeRecord . CustomType ::= "record" [Fields] "end" ;
separator Fields ";" ;
PRecordFields . Fields ::= [Id] ":" CustomType ;


--Tipo Identificador--
PCustomTypeId . CustomType ::= Id ;


--Procedimientos y Funciones--
separator ProcsYFuncs "" ;
PIdProcedure . ProcsYFuncs ::= "procedure" Id "(" [DecParm] ")" ";" BlockProcFun ";" ;
PIdFunction . ProcsYFuncs ::= "function" Id "(" [DecParm] ")" ":" Id ";" BlockProcFun ";" ;

--Declaracion Parametros Proc y Fun--
separator DecParm ";" ;
PDecParamVar . DecParm ::= "var" [Id] ":" Id ;
PDecParam . DecParm ::= [Id] ":" Id ;

--Bloque Proc y Fun--
PBlockProcFun . BlockProcFun ::= Parts Body ;

--Cuerpo Programa--
PBody . Body ::= "begin" [Instruction] "end" ;


--Instrucciones--
separator nonempty Instruction ";" ;
PInstruction . Instruction ::= ;
PListSimpleInstruction . Instruction ::= SimpleInstruction ;
PListCompositeInstruction . Instruction ::= StructuredInstruction ;

--Instrucciones Simples--

--Asignaciones--
PSimpleInstructionAssignment . SimpleInstruction ::= [AccId] ":=" Exp ;

--Instruccions Proc y Func--
PSimpleInstructionProc . SimpleInstruction ::= CallProc ;

--Instrucciones Estructuradas--

--Bloque begin end--
PStructuredInstructionBegEnd . StructuredInstruction ::= "begin" [Instruction] "end" ;
PStructuredInstructionCond . StructuredInstruction ::= ConditionalInstruction ;
PStructuredInstructionComp . StructuredInstruction ::= CompositeInstruction ;

--Instruccion If--
PCompositeInstructionIf . ConditionalInstruction ::= "if" Exp "then" Instruction ;

--Instruccion If Else--
PCompositeInstructionIfElse . ConditionalInstruction ::= "if" Exp "then" Instruction "else" Instruction ;

--Instruccion Repeat--
PCompositeInstructionRepeat . CompositeInstruction ::= "repeat" [Instruction] "until" Exp ;

--Instruccion For To--
PCompositeInstructionForTo . CompositeInstruction ::= "for" Id ":=" Exp "to" Exp "do" Instruction ;

--Instruccion For DownTo--
PCompositeInstructionForDownTo . CompositeInstruction ::= "for" Id ":=" Exp "downto" Exp "do" Instruction ;

--Instruccion While--
PCompositeInstructionWhile . CompositeInstruction ::= "while" Exp "do" Body ;

--Instruccion Case--
PCompositeInstructionCase . ConditionalInstruction ::= "case" Exp "of" [Ramas] "end" ;

--Ramas Case--
separator nonempty Ramas ";" ;
PCaseRamCase . Ramas ::= [ConstCase] ":" Instruction ;

--Costantes Case--
separator ConstCase "," ;
PConstCaseLiteral . ConstCase ::= Literal ;
PConsCaseId . ConstCase ::= Id ;
 

--Llamada a Funciones y Procedimientos--
PCallFuncProc . CallFunProc ::= Id "(" [Exp] ")" ;

-- Llamada de Proc --
PCallProc . CallProc ::= Id "(" [ExpC] ExpC ")" ;
PCallProcEmpty . CallProc ::= Id ;

PExpC . ExpC ::= Exp ;
terminator ExpC "," ;

--Expresiones--
separator Exp "," ;

--not--
PNotExp . Exp ::= "not" Exp1 ;

--Expresion General--
PGeneralExpMayor . Exp1 ::= Exp1 ">" Exp2 ;
PGeneralExpMinor . Exp1 ::= Exp1 "<" Exp2 ;
PGeneralExpEqual . Exp1 ::= Exp1 "=" Exp2 ;
PGeneralExpMyorEqual . Exp1 ::= Exp1 ">=" Exp2 ;
PGeneralExpMinorEqual . Exp1 ::= Exp1 "<=" Exp2 ;
PGeneralExpDistinct . Exp1 ::= Exp1 "<>" Exp2 ;

--Expresion simple--
PSimpleExpInvSign . Exp2 ::= "-" Exp3 ;
PSimpleExpPreSum . Exp2 ::= "+" Exp3 ;
PSimpleExpPlus . Exp2 ::= Exp2 "+" Exp3 ;
PSimpleExpOr . Exp2 ::= Exp2 "or" Exp3 ;
PSimpleExpMinus . Exp2 ::= Exp2 "-" Exp3 ;

--Terminos--
PTermExpMul . Exp3 ::= Exp3 "*" Exp4 ;
PTermExpDiv . Exp3 ::= Exp3 "/" Exp4 ;
PTermExpDiv2 . Exp3 ::= Exp3 "div" Exp4 ;
PTermExpMod . Exp3 ::= Exp3 "mod" Exp4 ;
PTermExpAnd . Exp3 ::= Exp3 "and" Exp4 ;

--Factor--
PFactorLit . Exp4 ::= Literal ;
PFactorId . Exp4 ::= AccId ;
PFactorAccId . Exp4 ::= AccId "." [AccId] ;
PFactorCall . Exp4 ::= CallFunProc ;

coercions Exp 4 ;


--Acceso--
separator nonempty AccId "." ;
PAccId . AccId ::= Id ;
PAccIdPointer . AccId ::= Id [Pointer];
PtrArrayAccess . AccId ::= ArrayAccess ;
PtrArrayAccessPointer . AccId ::= ArrayAccess [Pointer] ;

--ArrayAccess
PArrayAccess . ArrayAccess ::= Id "[" [TypeAccess] "]" ;
separator nonempty TypeAccess "," ;
PTypeAccessLiteral . TypeAccess ::= Exp ;

--Pointer
separator nonempty Pointer "" ;
PPointer2 . Pointer ::= "^" ;


--Terminators--
terminator nonempty Const ";" ;
terminator nonempty Var ";" ;
terminator nonempty Type ";" ;
separator Id "," ;