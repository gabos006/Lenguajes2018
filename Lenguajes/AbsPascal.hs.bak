

module AbsPascal where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = PProgram Id Block
  deriving (Eq, Ord, Show, Read)

data Block = PBlock Parts [Instruction]
  deriving (Eq, Ord, Show, Read)

data Parts = PPart Constants Types Vars FuncsProcs
  deriving (Eq, Ord, Show, Read)

data Constants = PPartConstEmpty | PPartConst [Const]
  deriving (Eq, Ord, Show, Read)

data Const = PListConst Id Val
  deriving (Eq, Ord, Show, Read)

data Val
    = PValInteger Integer
    | PValDouble Double
    | PValString String
    | PValChar Char
  deriving (Eq, Ord, Show, Read)

data Types = PPartTypesEmpty | PPartTypes [ListTypes]
  deriving (Eq, Ord, Show, Read)

data ListTypes = PListTypes Id Type
  deriving (Eq, Ord, Show, Read)

data Type
    = PTypeEnum [ListId]
    | PTypeSubRange RangeType RangeType
    | PTypePointer Id
    | PTypeArray [LType] Id
    | PTypeRecord [Fields]
    | PTypeIdentifier Id
  deriving (Eq, Ord, Show, Read)

data ListId = PListId Id
  deriving (Eq, Ord, Show, Read)

data RangeType
    = PRangeTypeId Id | PRangeTypeChar Char | PRangeTypeInteger Integer
  deriving (Eq, Ord, Show, Read)

data LType = PTypeArrayLType Type
  deriving (Eq, Ord, Show, Read)

data Fields = PRecordFields [ListId] Type
  deriving (Eq, Ord, Show, Read)

data Vars = PPartVarsEmpty | PPartVars [ListVars]
  deriving (Eq, Ord, Show, Read)

data ListVars = PListVars [ListId] Id
  deriving (Eq, Ord, Show, Read)

data FuncsProcs = PPartFuncsProcs
  deriving (Eq, Ord, Show, Read)

data Instruction
    = PListInstructionEmpty
    | PListSimpleInstruction SimpleInstruction
    | PListCompositeInstruction
  deriving (Eq, Ord, Show, Read)

data SimpleInstruction
    = PSimpleInstructionEmpty
    | PSimpleInstructionAssignment Id Exps
    | PSimpleInstructionProcFunc Id Parms
  deriving (Eq, Ord, Show, Read)

data Parms = PParmsEmpty | PParms [Exps]
  deriving (Eq, Ord, Show, Read)

data Exps
    = PExpsEmpty
    | PExpsString String
    | PExpsId Id
    | PExpsInteger Integer
  deriving (Eq, Ord, Show, Read)

