module SkelPascal where

-- Haskell module generated by the BNF converter

import AbsPascal
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PProgram id block -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  PBlock parts body -> failure x
transParts :: Parts -> Result
transParts x = case x of
  PPart consts types vars -> failure x
transConsts :: Consts -> Result
transConsts x = case x of
  PPartConstEmpty -> failure x
  PPartConst consts const -> failure x
transConst :: Const -> Result
transConst x = case x of
  PConst id literal -> failure x
transLiteral :: Literal -> Result
transLiteral x = case x of
  PValInteger integer -> failure x
  PValDouble double -> failure x
  PValString string -> failure x
  PValChar char -> failure x
transVars :: Vars -> Result
transVars x = case x of
  PPartVarsEmpty -> failure x
  PPartVars vars var -> failure x
transVar :: Var -> Result
transVar x = case x of
  PVar ids id -> failure x
transTypes :: Types -> Result
transTypes x = case x of
  PPartTypesEmpty -> failure x
  PPartTypes types type_ -> failure x
transType :: Type -> Result
transType x = case x of
  PType id customtype -> failure x
transCustomType :: CustomType -> Result
transCustomType x = case x of
  PCustomTypeEnum ids -> failure x
  PCustomTypeSubRange rangetype1 rangetype2 -> failure x
  PCustomTypePointer id -> failure x
  PTypeArray arrtype id -> failure x
  PTypeRecord fieldss -> failure x
  PCustomTypeId id -> failure x
transRangeType :: RangeType -> Result
transRangeType x = case x of
  PRangeTypeId id -> failure x
  PRangeTypeChar char -> failure x
  PRangeTypeInteger integer -> failure x
transArrType :: ArrType -> Result
transArrType x = case x of
  PTypeArrayLType rangetype1 rangetype2 -> failure x
transFields :: Fields -> Result
transFields x = case x of
  PRecordFields id customtype -> failure x
transBody :: Body -> Result
transBody x = case x of
  PBody instructions -> failure x
transInstruction :: Instruction -> Result
transInstruction x = case x of
  PListSimpleInstruction simpleinstruction -> failure x
transSimpleInstruction :: SimpleInstruction -> Result
transSimpleInstruction x = case x of
  PSimpleInstructionAssignment accids exps -> failure x
  PSimpleInstructionProcFunc id parms -> failure x
transAccId :: AccId -> Result
transAccId x = case x of
  PAccId id -> failure x
transParms :: Parms -> Result
transParms x = case x of
  PParamsEmpty -> failure x
  PParms expss -> failure x
transExps :: Exps -> Result
transExps x = case x of
  PFactorString string -> failure x
  PFactorInteger integer -> failure x
  PFactorId id -> failure x

