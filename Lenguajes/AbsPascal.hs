

module AbsPascal where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = PProgram Id Block
  deriving (Eq, Ord, Show, Read)

data Block = PBlock Parts [Instruction]
  deriving (Eq, Ord, Show, Read)

data Parts = PPart Constants Types Vars FuncsProcs
  deriving (Eq, Ord, Show, Read)

data Constants = PPartConstEmpty | PPartConst [Const]
  deriving (Eq, Ord, Show, Read)

data Const = PListConst Id Val
  deriving (Eq, Ord, Show, Read)

data Val
    = PValInteger Integer
    | PValDouble Double
    | PValString String
    | PValChar Char
  deriving (Eq, Ord, Show, Read)

data Types = PPartTypesEmpty | PPartTypes [ListTypes]
  deriving (Eq, Ord, Show, Read)

data ListTypes = PListTypes Id Type
  deriving (Eq, Ord, Show, Read)

data Type
    = PTypeEnum [ListId]
    | PTypeSubRange RangeType RangeType
    | PTypePointer Id
    | PTypeArray [LType] Id
    | PTypeRecord [Fields]
    | PTypeIdentifier Id
  deriving (Eq, Ord, Show, Read)

data ListId = PListId Id
  deriving (Eq, Ord, Show, Read)

data RangeType
    = PRangeTypeId Id | PRangeTypeChar Char | PRangeTypeInteger Integer
  deriving (Eq, Ord, Show, Read)

data LType = PTypeArrayLType Type
  deriving (Eq, Ord, Show, Read)

data Fields = PRecordFields [ListId] Type
  deriving (Eq, Ord, Show, Read)

data AccessRecord = PAccessRecord Id Id
  deriving (Eq, Ord, Show, Read)

data Vars = PPartVarsEmpty | PPartVars [ListVars]
  deriving (Eq, Ord, Show, Read)

data ListVars = PListVars [ListId] Id
  deriving (Eq, Ord, Show, Read)

data FuncsProcs = PPartFuncsProcs
  deriving (Eq, Ord, Show, Read)

data Instruction
    = PListInstructionEmpty
    | PListSimpleInstruction SimpleInstruction
    | PListCompositeInstruction CompositeInstruction
  deriving (Eq, Ord, Show, Read)

data SimpleInstruction
    = PSimpleInstructionEmpty
    | PSimpleInstructionAssignment Id Exps
    | PSimpleInstructionAssignmentAccRecord AccessRecord Exps
    | PSimpleInstructionProcFunc Id Parms
  deriving (Eq, Ord, Show, Read)

data Parms = PParmsEmpty | PParms [Exps]
  deriving (Eq, Ord, Show, Read)

data Exps
    = PExpsEmpty
    | PExpsFactor Factor
    | PExpsTerms Terms
    | PExpsSimple SimpleExp
    | PExpGeneral GeneralExp
  deriving (Eq, Ord, Show, Read)

data Factor
    = PFactorString String
    | PFactorId Id
    | PFactorInteger Integer
    | PFactorAccRecord AccessRecord
  deriving (Eq, Ord, Show, Read)

data Terms = PTerms
  deriving (Eq, Ord, Show, Read)

data SimpleExp
    = PSimpleExpAdd Add
    | PSimpleExpEquals Equals
    | PSimpleExpMinus Minus
  deriving (Eq, Ord, Show, Read)

data Add = PAdd Factor Factor
  deriving (Eq, Ord, Show, Read)

data Equals = PEquals Factor Factor
  deriving (Eq, Ord, Show, Read)

data Minus = PMinus Factor Factor
  deriving (Eq, Ord, Show, Read)

data GeneralExp = PGeneralExp
  deriving (Eq, Ord, Show, Read)

data CompositeInstruction
    = PCompositeInstructionRepeat [ListInstrs] Exps
    | PCompositeInstructionForTo Id Exps Exps Instruction
    | PCompositeInstructionForDownTo Id Exps Exps Instruction
  deriving (Eq, Ord, Show, Read)

data ListInstrs = PRepeatListInstrs Instruction
  deriving (Eq, Ord, Show, Read)

