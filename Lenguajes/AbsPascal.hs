

module AbsPascal where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = PProgram Id Block
  deriving (Eq, Ord, Show, Read)

data Block = PBlock Parts Body
  deriving (Eq, Ord, Show, Read)

data Parts = PPart Consts Types Vars
  deriving (Eq, Ord, Show, Read)

data Consts = PPartConstEmpty | PPartConst [Const] Const
  deriving (Eq, Ord, Show, Read)

data Const = PConst Id Literal
  deriving (Eq, Ord, Show, Read)

data Literal
    = PValInteger Integer
    | PValDouble Double
    | PValString String
    | PValChar Char
  deriving (Eq, Ord, Show, Read)

data Vars = PPartVarsEmpty | PPartVars [Var] Var
  deriving (Eq, Ord, Show, Read)

data Var = PVar [Id] Id
  deriving (Eq, Ord, Show, Read)

data Types = PPartTypesEmpty | PPartTypes [Type] Type
  deriving (Eq, Ord, Show, Read)

data Type = PType Id CustomType
  deriving (Eq, Ord, Show, Read)

data CustomType
    = PCustomTypeEnum [Id]
    | PCustomTypeSubRange RangeType RangeType
    | PCustomTypePointer Id
    | PTypeArray ArrType Id
    | PTypeRecord [Fields]
    | PCustomTypeId Id
  deriving (Eq, Ord, Show, Read)

data RangeType
    = PRangeTypeId Id | PRangeTypeChar Char | PRangeTypeInteger Integer
  deriving (Eq, Ord, Show, Read)

data ArrType = PTypeArrayLType RangeType RangeType
  deriving (Eq, Ord, Show, Read)

data Fields = PRecordFields Id CustomType
  deriving (Eq, Ord, Show, Read)

data Body = PBody [Instruction]
  deriving (Eq, Ord, Show, Read)

data Instruction = PListSimpleInstruction SimpleInstruction
  deriving (Eq, Ord, Show, Read)

data SimpleInstruction
    = PSimpleInstructionAssignment Id Exps
    | PSimpleInstructionProcFunc Id Parms
  deriving (Eq, Ord, Show, Read)

data Parms = PParamsEmpty | PParms [Exps]
  deriving (Eq, Ord, Show, Read)

data Exps
    = PFactorString String | PFactorId Id | PFactorInteger Integer
  deriving (Eq, Ord, Show, Read)

