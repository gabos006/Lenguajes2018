

module AbsPascal where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = PProgram Id Block
  deriving (Eq, Ord, Show, Read)

data Block = PBlock Parts Body
  deriving (Eq, Ord, Show, Read)

data Parts = PPart Consts Types Vars
  deriving (Eq, Ord, Show, Read)

data Consts = PPartConstEmpty | PPartConst [Const] Const
  deriving (Eq, Ord, Show, Read)

data Const = PConst Id Literal
  deriving (Eq, Ord, Show, Read)

data Literal
    = PValInteger Integer
    | PValDouble Double
    | PValString String
    | PValChar Char
  deriving (Eq, Ord, Show, Read)

data Vars = PPartVarsEmpty | PPartVars [Var] Var
  deriving (Eq, Ord, Show, Read)

data Var = PVar [Id] Id
  deriving (Eq, Ord, Show, Read)

data Types = PPartTypesEmpty | PPartTypes [Type] Type
  deriving (Eq, Ord, Show, Read)

data Type = PType Id CustomType
  deriving (Eq, Ord, Show, Read)

data CustomType
    = PCustomTypeEnum [Id]
    | PCustomTypeSubRange RangeType RangeType
    | PCustomTypePointer Id
    | PTypeArray ArrType Id
    | PTypeRecord [Fields]
    | PCustomTypeId Id
  deriving (Eq, Ord, Show, Read)

data RangeType
    = PRangeTypeId Id | PRangeTypeChar Char | PRangeTypeInteger Integer
  deriving (Eq, Ord, Show, Read)

data ArrType = PTypeArrayLType RangeType RangeType
  deriving (Eq, Ord, Show, Read)

data Fields = PRecordFields Id CustomType
  deriving (Eq, Ord, Show, Read)

data Body = PBody [Instruction]
  deriving (Eq, Ord, Show, Read)

data Instruction
    = PListSimpleInstruction SimpleInstruction
    | PListCompositeInstruction CompositeInstruction
  deriving (Eq, Ord, Show, Read)

data SimpleInstruction
    = PSimpleInstructionAssignment [AccId] Exp
    | PSimpleInstructionProcFunc Id Parms
  deriving (Eq, Ord, Show, Read)

data CompositeInstruction
    = PCompositeInstructionIf Exp Instruction
    | PCompositeInstructionIfElse Exp Instruction Instruction
    | PCompositeInstructionRepeat [Instruction] Exp
    | PCompositeInstructionForTo Id Exp Exp Instruction
    | PCompositeInstructionForDownTo Id Exp Exp Instruction
  deriving (Eq, Ord, Show, Read)

data Parms = PParamsEmpty | PParms [Exp]
  deriving (Eq, Ord, Show, Read)

data Exp
    = PGeneralExpSimple Exp
    | PGeneralExpMayor Exp Exp
    | PGeneralExpMinor Exp Exp
    | PGeneralExpEqual Exp Exp
    | PGeneralExpMayorEqual Exp Exp
    | PGeneralExpMinorEqual Exp Exp
    | PGeneralExpDistinct Exp Exp
    | PFactorLit Literal
    | PFactorId Id
    | PFactorAccId Id [AccId]
    | PTermFactor Exp
    | PTermExpMul Exp Exp
    | PTermExpDiv1 Exp Exp
    | PTermExpDiv2 Exp Exp
    | PTermExpMod Exp Exp
    | PTermExpAnd Exp Exp
    | PSimpleExpTerm Exp
    | PSimpleExpAdd Exp Exp
    | PSimpleExpEquals Exp Exp
    | PSimpleExpMinus Exp Exp
    | PSimpleExpInvSign Exp
  deriving (Eq, Ord, Show, Read)

data AccId = PAccId Id
  deriving (Eq, Ord, Show, Read)

