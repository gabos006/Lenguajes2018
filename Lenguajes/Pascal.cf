comment "(*" "*)" ;

token Id (letter (letter | digit)*) ;

PProgram . Program ::= "program" Id ";" Block ;

PBlock . Block ::= Parts "begin" [Instruction] "end." ;

PPart . Parts ::=  Constants Types Vars FuncsProcs ;

PPartConstEmpty . Constants ::= ;
PPartConst . Constants ::= "const" [Const] ;

separator Const ";" ;
PListConst . Const ::= Id "=" Val ;

PValInteger . Val ::= Integer ;
PValDouble . Val ::= Double ;
PValString . Val ::= String ;
PValChar . Val ::= Char ;

PPartTypesEmpty . Types ::= ;
PPartTypes . Types ::= "type" [ListTypes] ;

separator ListTypes ";" ;
PListTypes . ListTypes ::= Id "=" Type ;

PTypeEnum . Type ::= "(" [ListId] ")" ;

separator ListId "," ;
PListIdEnum . ListId ::= Id ;

PTypeSubRange . Type ::= RangeType ".." RangeType ;

PRangeTypeId . RangeType ::= Id ;
PRangeTypeChar . RangeType ::= Char ;
PRangeTypeInteger . RangeType ::= Integer ;

PTypePointer . Type ::= "^" Id ;

PTypeArray . Type ::= "array" "[" [LType] "]" "of" Id ;

separator LType "," ;
PTypeArrayLType . LType ::= Type ;

PTypeRecord . Type ::= "record" [Fields] "end";

separator Fields ";" ;
PRecordFields . Fields ::= [ListId] ":" Type ;

PAccessRecord . AccessRecord ::= Id "." Id ;

PTypeIdentifier . Type ::= Id ;

PPartVarsEmpty . Vars ::= ;
PPartVars . Vars ::= "var" [ListVars] ;

separator ListVars ";" ;
PListVars . ListVars ::= [ListId] ":" Id ;

separator ListId "," ;
PListId . ListId ::= Id ;

PPartFuncsProcs . FuncsProcs ::= ;


separator Instruction ";" ;
PListInstructionEmpty . Instruction ::= ;

PListSimpleInstruction . Instruction ::= SimpleInstruction ;

PSimpleInstructionEmpty . SimpleInstruction ::= ;
PSimpleInstructionAssignment . SimpleInstruction ::= Id ":=" Exps ;
PSimpleInstructionAssignmentAccRecord . SimpleInstruction ::= AccessRecord ":=" Exps ;
PSimpleInstructionProcFunc . SimpleInstruction ::= Id Parms ;

separator Parms "," ;
PParmsEmpty . Parms ::= ;
PParms . Parms ::= "(" [Exps] ")" ;

separator Exps "," ;
PExpsEmpty . Exps ::= ;
PExpsFactor . Exps ::= Factor ;

PFactorString . Factor ::= String ;
PFactorId . Factor ::= Id ;
PFactorInteger . Factor ::= Integer ;
PFactorAccRecord . Factor ::= AccessRecord ;
PFactorFunction . Factor ::= Id "(" [Exps] ")" ;

PExpsTerms . Exps ::= Terms ;

PTerms . Terms ::= ;

PExpsSimple . Exps ::= SimpleExp ;

PSimpleExpAdd . SimpleExp ::= Add ;
PSimpleExpEquals . SimpleExp ::= Equals ;
PSimpleExpMinus . SimpleExp ::= Minus ;
PAdd . Add ::= Factor "+" Factor ;
PEquals . Equals ::= Factor "=" Factor ;
PMinus . Minus ::= Factor "-" Factor ;

PExpGeneral . Exps ::= GeneralExp ;

PGeneralExp . GeneralExp ::= ;
PGeneralExpMayor . GeneralExp ::= "(" Exps ">" Exps ")" ;
PGeneralExpMinor . GeneralExp ::= "(" Exps "<" Exps ")" ;
PGeneralExpEqual . GeneralExp ::= "(" Exps "=" Exps ")" ;
PGeneralExpMayorEqual . GeneralExp ::= "(" Exps ">=" Exps ")" ;
PGeneralExpMinorEqual . GeneralExp ::= "(" Exps "<=" Exps ")" ;
PGeneralExpDistinct . GeneralExp ::= "(" Exps "<>" Exps ")" ;

PListCompositeInstruction . Instruction ::= CompositeInstruction ;

PCompositeInstructionIf . CompositeInstruction ::= "if" Exps "then" Instruction Else ;

PIfElseEmpty . Else ::= ;
PIfElse . Else ::= "else" Instruction ;

PCompositeInstructionRepeat . CompositeInstruction ::= "repeat" [ListInstrs] "until" Exps ;

separator ListInstrs ";" ;
PRepeatListInstrs . ListInstrs ::= Instruction ;

PCompositeInstructionForTo . CompositeInstruction ::= "for" Id ":=" Exps "to" Exps "do" Instruction ;
PCompositeInstructionForDownTo . CompositeInstruction ::= "for" Id ":=" Exps "downto" Exps "do" Instruction ;
