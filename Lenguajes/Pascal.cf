comment "(*" "*)" ;

token Id (letter (letter | digit)*) ;

--Programa--
PProgram . Program ::= "program" Id ";" Block ;


--Bloque--
PBlock . Block ::= Parts Body "." ;


--Partes--
PPart . Parts ::=  Consts Types Vars ProcsYFuncs ;


--Constantes--
PPartConstEmpty . Consts ::= ;
PPartConst . Consts ::= "const" [Const] Const ";" ;
PConst . Const ::= Id "=" Literal ;


--Literales--
PValInteger . Literal ::= Integer ;
PValDouble . Literal ::= Double ;
PValString . Literal ::= String ;
PValChar . Literal ::= Char ;


--Variables--
PPartVarsEmpty . Vars ::= ;
PPartVars . Vars ::= "var" [Var] Var ";" ;
PVar . Var ::= [Id] ":" Id ;


--Tipos--
PPartTypesEmpty . Types ::= ;
PPartTypes . Types ::= "type" [Type] Type ";" ;
PType . Type ::= Id "=" CustomType ;


--Tipo Enumerado--
PCustomTypeEnum . CustomType ::= "(" [Id] ")" ;


--Tipo SubRango--
PCustomTypeSubRange . CustomType ::= RangeType ".." RangeType ;
PRangeTypeId . RangeType ::= Id ;
PRangeTypeChar . RangeType ::= Char ;
PRangeTypeInteger . RangeType ::= Integer ;


--Tipo Puntero--
PCustomTypePointer . CustomType ::= "^" Id ;


--Tipo Array--
-- Arregla la 5 --
PTypeArray . CustomType ::= "array" "[" ArrType "]" "of" CustomType ;
PTypeArrayLType . ArrType ::= RangeType ".." RangeType ;


--Tipo Record--
PTypeRecord . CustomType ::= "record" [Fields] "end" ;
separator Fields ";" ;
PRecordFields . Fields ::= Id ":" CustomType ;


--Tipo Identificador--
PCustomTypeId . CustomType ::= Id ;


--Procedimientos y Funciones--
PProcsYFuncsEmpty . ProcsYFuncs ::= ;
PIdProcedure . ProcsYFuncs ::= "procedure" Id "(" [DecParm] ")" ";" BlockProcFun ;
PIdFunction . ProcsYFuncs ::= "function" Id "(" [DecParm] ")" ":" Id ";" BlockProcFun ;

--Declaracion Parametros Proc y Fun--
separator DecParm ";" ;
PDecParamVar . DecParm ::= "var" [Id] ":" Id ;
PDecParam . DecParm ::= [Id] ":" Id ;

--Bloque Proc y Fun--
PBlockProcFun . BlockProcFun ::= Parts Body ";" ;

--Cuerpo Programa--
PBody . Body ::= "begin" [Instruction] "end" ;


--Instrucciones--
separator Instruction ";" ;
PListSimpleInstruction . Instruction ::= SimpleInstruction ;
PListCompositeInstruction . Instruction ::= CompositeInstruction ;


--Instrucciones Simples--

--Asignaciones--
PSimpleInstructionAssignment . SimpleInstruction ::= [AccId] ":=" Exp ;

--Instruccions Proc y Func--
PSimpleInstructionProcFunc . SimpleInstruction ::= CallFunProc ;


--Instrucciones Compuestas--

--Instruccion If--
PCompositeInstructionIf . CompositeInstruction ::= "if" Exp "then" Instruction ;

--Instruccion If Else--
PCompositeInstructionIfElse . CompositeInstruction ::= "if" Exp "then" Instruction "else" Instruction ;

--Instruccion Repeat--
PCompositeInstructionRepeat . CompositeInstruction ::= "repeat" [Instruction] "until" Exp ;

--Instruccion For To--
PCompositeInstructionForTo . CompositeInstruction ::= "for" Id ":=" Exp "to" Exp "do" Instruction ;

--Instruccion For DownTo--
PCompositeInstructionForDownTo . CompositeInstruction ::= "for" Id ":=" Exp "downto" Exp "do" Instruction ;

--Instruccion While--
PCompositeInstructionWhile . CompositeInstruction ::= "while" Exp "do" Body ;

--Instruccion Case--
PCompositeInstructionCase . CompositeInstruction ::= "case" Exp "of" [Ramas] "end" ;

--Ramas Case--
separator nonempty Ramas ";" ;
PCaseRamCase . Ramas ::= [ConstCase] ":" BodyRamaCase ;

--Costantes Case--
separator ConstCase "," ;
PConstCaseLiteral . ConstCase ::= Literal ;
PConsCaseId . ConstCase ::= Id ;

--Body rama Case--
PBodyRamaCaseOne . BodyRamaCase ::= Instruction ;
PBodyRamaCaseMany . BodyRamaCase ::= Body ;
 

--Parametros Instruccion Proc y Func--
PParamsEmpty . Parms ::= ;
PParms . Parms ::= "(" [Exp] ")" ;

--Expresiones--
separator Exp "," ;

--not--

PNotExp . Exp ::= "not" Exp1 ;

--Expresion General--
PGeneralExp . Exp1 ::= Exp1 GenCom Exp2 ;
PGeneralExpMayor . GenCom ::= ">" ;
PGeneralExpMinor . GenCom ::= "<" ;
PGeneralExpEqual . GenCom ::= "=" ;
PGeneralExpMayorEqual . GenCom ::= ">=" ;
PGeneralExpMinorEqual . GenCom ::= "<=" ;
PGeneralExpDistinct . GenCom ::= "<>" ;

--Expresion simple--
PSimpleExpInvSign . Exp2 ::= "-" Exp3 ;
PSimpleExp . Exp2 ::= Exp2 AddCom Exp3 ;

PSimpleExpAdd . AddCom ::= "+" ;
PSimpleExpEquals . AddCom ::= "or" ;
PSimpleExpMinus . AddCom ::= "-" ;

--Terminos--
PTermExp . Exp3 ::= Exp3 MulCom Exp4 ;
PTermExpMul . MulCom ::= "*" ;
PTermExpDiv1 . MulCom ::= "/" ;
PTermExpDiv2 . MulCom ::= "div" ;
PTermExpMod . MulCom ::= "mod" ;
PTermExpAnd . MulCom ::= "and" ;

--Factor--
PFactorLit . Exp4 ::= Literal ;
PFactorId . Exp4 ::= Id ;
PFactorAccId . Exp4 ::= Id "." [AccId] ;
PFactorCall . Exp4 ::= CallFunProc ;

coercions Exp 4 ;

--Llamada a Funciones y Procedimientos--
PCallFuncProc . CallFunProc ::= Id Parms ;

--Acceso--
-- Arregla la 22 --
separator AccId "." ;
PAccId . AccId ::= Id ;
PtrAccId . AccId ::= Id "^" ;

--Terminators--
terminator Const ";" ;
terminator Var ";" ;
terminator Type ";" ;
separator Id "," ;
