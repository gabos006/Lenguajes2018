{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintPascal where

-- pretty-printer generated by the BNF converter

import AbsPascal
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print Id where
  prt _ (Id i) = doc (showString ( i))



instance Print Program where
  prt i e = case e of
    PProgram id block -> prPrec i 0 (concatD [doc (showString "program"), prt 0 id, doc (showString ";"), prt 0 block])

instance Print Block where
  prt i e = case e of
    PBlock parts instructions -> prPrec i 0 (concatD [prt 0 parts, doc (showString "begin"), prt 0 instructions, doc (showString "end.")])

instance Print Parts where
  prt i e = case e of
    PPart constants types vars funcsprocs -> prPrec i 0 (concatD [prt 0 constants, prt 0 types, prt 0 vars, prt 0 funcsprocs])

instance Print Constants where
  prt i e = case e of
    PPartConstEmpty -> prPrec i 0 (concatD [])
    PPartConst consts -> prPrec i 0 (concatD [doc (showString "const"), prt 0 consts])

instance Print Const where
  prt i e = case e of
    PListConst id val -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 val])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Val where
  prt i e = case e of
    PValInteger n -> prPrec i 0 (concatD [prt 0 n])
    PValDouble d -> prPrec i 0 (concatD [prt 0 d])
    PValString str -> prPrec i 0 (concatD [prt 0 str])
    PValChar c -> prPrec i 0 (concatD [prt 0 c])

instance Print Types where
  prt i e = case e of
    PPartTypesEmpty -> prPrec i 0 (concatD [])
    PPartTypes listtypess -> prPrec i 0 (concatD [doc (showString "type"), prt 0 listtypess])

instance Print ListTypes where
  prt i e = case e of
    PListTypes id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Type where
  prt i e = case e of
    PTypeEnum listids -> prPrec i 0 (concatD [doc (showString "("), prt 0 listids, doc (showString ")")])
    PTypeSubRange rangetype1 rangetype2 -> prPrec i 0 (concatD [prt 0 rangetype1, doc (showString ".."), prt 0 rangetype2])
    PTypePointer id -> prPrec i 0 (concatD [doc (showString "^"), prt 0 id])
    PTypeArray ltypes id -> prPrec i 0 (concatD [doc (showString "array"), doc (showString "["), prt 0 ltypes, doc (showString "]"), doc (showString "of"), prt 0 id])
    PTypeRecord fieldss -> prPrec i 0 (concatD [doc (showString "record"), prt 0 fieldss, doc (showString "end")])
    PTypeIdentifier id -> prPrec i 0 (concatD [prt 0 id])

instance Print ListId where
  prt i e = case e of
    PListId id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print RangeType where
  prt i e = case e of
    PRangeTypeId id -> prPrec i 0 (concatD [prt 0 id])
    PRangeTypeChar c -> prPrec i 0 (concatD [prt 0 c])
    PRangeTypeInteger n -> prPrec i 0 (concatD [prt 0 n])

instance Print LType where
  prt i e = case e of
    PTypeArrayLType type_ -> prPrec i 0 (concatD [prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Fields where
  prt i e = case e of
    PRecordFields listids type_ -> prPrec i 0 (concatD [prt 0 listids, doc (showString ":"), prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Vars where
  prt i e = case e of
    PPartVarsEmpty -> prPrec i 0 (concatD [])
    PPartVars listvarss -> prPrec i 0 (concatD [doc (showString "var"), prt 0 listvarss])

instance Print ListVars where
  prt i e = case e of
    PListVars listids id -> prPrec i 0 (concatD [prt 0 listids, doc (showString ":"), prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print FuncsProcs where
  prt i e = case e of
    PPartFuncsProcs -> prPrec i 0 (concatD [])

instance Print Instruction where
  prt i e = case e of
    PListInstructionEmpty -> prPrec i 0 (concatD [])
    PListSimpleInstruction simpleinstruction -> prPrec i 0 (concatD [prt 0 simpleinstruction])
    PListCompositeInstruction -> prPrec i 0 (concatD [])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print SimpleInstruction where
  prt i e = case e of
    PSimpleInstructionEmpty -> prPrec i 0 (concatD [])
    PSimpleInstructionAssignment id exps -> prPrec i 0 (concatD [prt 0 id, doc (showString ":="), prt 0 exps])
    PSimpleInstructionProcFunc id parms -> prPrec i 0 (concatD [prt 0 id, prt 0 parms])

instance Print Parms where
  prt i e = case e of
    PParmsEmpty -> prPrec i 0 (concatD [])
    PParms expss -> prPrec i 0 (concatD [doc (showString "("), prt 0 expss, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Exps where
  prt i e = case e of
    PExpsEmpty -> prPrec i 0 (concatD [])
    PExpsString str -> prPrec i 0 (concatD [prt 0 str])
    PExpsId id -> prPrec i 0 (concatD [prt 0 id])
    PExpsInteger n -> prPrec i 0 (concatD [prt 0 n])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

